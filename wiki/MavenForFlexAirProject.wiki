#summary Maven Project for Flex AIR, Pure MVC, Spring ActionScript, and Flex Unit.
#labels Phase-Implementation

= Introduction =

I worked on a Flex AIR project with [http://puremvc.org/ Pure MVC], [http://www.springsource.org/extensions/se-springactionscript-as Spring ActionScript], and [http://opensource.adobe.com/wiki/display/flexunit/FlexUnit+4+feature+overview Flex Unit 4] recently, which was not a very pleasant experience. Many Flex projects use ant for build and Flex Air project is even more difficult to maventize. I post my experience on the Flex AIR Maven project and hope it saves some people's time. 

= Prerequisites =

  * _Flex SDK 3_: Download Flex 3 SDK from [http://opensource.adobe.com/wiki/display/flexsdk/Download+Flex+3 Adobe site]. Unpack it and then set up the FLEX_HOME environment variable.

  * _Flex AIR_: Downloaded the AIR from [http://get.adobe.com/air/ Adobe AIR site] and install it. Windows installation is easy and more details of Linux installation could be found from my previous post [http://code.google.com/p/jianwikis/wiki/InstallAIRonFedora11#Adobe_Air Install Adobe AIR, BlazDS, and Blaze Monster on Fedora 11].

  * _Maven_: Download Maven from [http://maven.apache.org/download.html Maven site]. If you never installed Maven before, please follow [http://maven.apache.org/download.html#Installation the official Maven Installation Guide].

  * _Proxy Server_: If you work behind a firewall like me, you can download [http://ntlmaps.sourceforge.net/ NTLM Authorization Proxy Server] and use it as a proxy server. You may need to configure your {{{HOME/.m2/settings.xml}}} as follows,

{{{   
  <proxies>
   <proxy>
      <active>true</active>
      <protocol>http</protocol>
      <host>localhost</host>
      <port>5865</port>
      <!--username>proxyuser</username>
      <password>somepassword</password-->
      <nonProxyHosts>*.mycompany.com|*.othersites_do_not_need_proxy</nonProxyHosts>
    </proxy>
  </proxies>
}}}

= Flex AIR Maven Project =

== Sample Project ==

I use the sample project which uses Spring ActionScript, Pure MVC, Flex AIR, and Flex Unit 4. The project name is "AirSample".

== Create A Maven Project ==

You can use Maven archetype to create a skeleton project, for example,

{{{
mvn archetype:generate
}}}

then choose maven-archetype-quickstart or manually create a Maven project. After manually set up some directory, the project structure looks as follows,

{{{
[jfang@Mars AirSample]$ tree .
.
|-- pom.xml
|-- src
|   |-- main
|   |   |-- flex
|   |   |   |-- AirSample-app.xml
|   |   |   |-- AirSample.mxml
|   |   |   |-- LinkageEnforcer.as
|   |   |   |-- TestRunner-app.xml
|   |   |   |-- TestRunner.mxml
|   |   `-- resources
|   |       |-- AirSample-app.xml
|   |       |-- applicationContext.xml
|   |       |-- cert.p12
|   |       `-- configurationClassesCompilerConfig.xml
|   `-- test
|       |-- flex
|       `-- resources
|           `-- TestRunner-app.xml
|           `-- testApplicationContext.xml
}}}

Where the AirSample-app.xml is created for Flash Builder 3 and it includes the following meta data,

{{{
<!-- The main SWF or HTML file of the application. Required. -->
<!-- Note: In Flex Builder, the SWF reference is set automatically. -->
<content>[This value will be overwritten by Flex Builder in the output app.xml]</content>
}}}

That is why we need another copy of the AirSample-app.xml in the resources directory with the content as follows,

{{{
<content>AirSample.swf</content>
}}}

Of course, you can use [http://maven.apache.org/plugins/maven-antrun-plugin/ the Maven antrun plugin] to replace the meta data in the AirSample-app.xml file as follows,

{{{
<copy file=”${basedir}/src/main/flex/${APP_NAME}-app.xml” todir=”${basedir}/target/classes” overwrite=”true” />
<replace file=”${basedir}/target/classes/${APP_NAME}-app.xml”
token=”[This value will be overwritten by Flex Builder in the output app.xml]” value=”${APP_NAME}.swf” />
}}} 

For simplicity, we simple keep another copy of the AirSample-app.xml in the resources directory for Maven build since this file is unlikely to change. Similarly, we have two TestRunner-app.xml files for Flex Unit 4, which will be covered later.

The AirSample.mxml is the AIR application main file and it usually comes with the following XML name spaces,

{{{
<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:components="com.mycompany.view.components.*" frameRate="7"
	layout="vertical" applicationComplete="onCreationComplete();" width="100%" height="100%">
	<mx:Script>
		<![CDATA[

			private function onCreationComplete():void
			{
			    facade = ApplicationFacade.getInstance(["applicationContext.xml"]);
				facade.addEventListener(Event.COMPLETE, startupApp);
				facade.initializeIocContainer(null);
				......
			}
                        ......
             ]]>
	</mx:Script>	
</mx:WindowedApplication>
}}}

where applicationContext.xml is the Spring ActionScript wiring file. configurationClassesCompilerConfig.xml is a custom compilation configuration file and cert.p12 is a cert file to sign the AIR package.

== Maven POM ==

=== Repositories ===

To build an Air application with Spring ActionScript, Pure MVC, and Flex Unit 4, we need to use the following Maven repositories:

{{{
        <repository>
            <id>flexmojos-repository</id>
            <url>http://repository.sonatype.org/content/groups/public/</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
        
        <repository>
	    <id>ObjectWEB</id>
	    <url>http://maven.ow2.org/maven2/</url>
	    <releases>
		<enabled>true</enabled>
	    </releases>
            <snapshots>
		<enabled>false</enabled>
	    </snapshots>
	</repository>

        <repository>
            <id>yoolab.org-releases</id>
            <url>http://projects.yoolab.org/maven/content/repositories/releases</url>
            <releases>
                <enabled>true</enabled>
            </releases>
        </repository>
        <repository>
            <id>yoolab.org-snapshots</id>
            <url>http://projects.yoolab.org/maven/content/repositories/snapshots</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>kungfuters-thirdparty-releases-repo</id>
            <name>Kungfuters.org Third Party Releases Repository</name>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
            <url>http://kungfuters.org/nexus/content/repositories/thirdparty</url>
        </repository>
}}}

You may also need to use your local repository to upload some Flex dependencies since some of them could not be found on any Maven repo. For example, we have a local repository:

{{{
        <repository>
            <id>mycompany-thirdparty-repo</id>
            <name>Mycompany Third Party Releases Repository</name>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
            <url>http://nexus.mycompany.com/nexus/content/repositories/thirdparty</url>
        </repository
}}}

Then, I can use the following Maven command to upload a jar artifact to the local Maven repository

{{{
mvn deploy:deploy-file -Dfile=./FlexUnit4CIListener.swc -Durl=http://nexus.mycompany.com/nexus/content/repositories/thirdparty -DgroupId=com.adobe.flexunit -DartifactId=cilistener -Dversion=4.0-beta-2 -Dpackaging=swc -DrepositoryId=mycompany-thirdparty-repo
}}}

To make it work, you need to set up your server upload user account in your Maven settings.xml, for example,

{{{
      <server>
           <id>mycompany-thirdparty-repo</id>
           <username>deployment</username>
           <password>mypassword</password>
      </server>  
}}}

=== Flex AIR dependencies ===

Our application depends on Spring ActionScript, Pure MVC, ActionScript 3, and Flex AIR sdk. The Maven dependencies are shown as follows,

{{{
        <dependency>
            <groupId>org.springextensions.actionscript</groupId>
            <artifactId>spring-actionscript-core</artifactId>
            <version>0.8</version>
            <type>swc</type>
            <exclusions>
                <exclusion>
                    <groupId>com.adobe.flex.framework</groupId>
                    <artifactId>playerglobal</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springextensions.actionscript</groupId>
            <artifactId>spring-actionscript-puremvc-standard</artifactId>
            <version>0.8</version>
            <type>swc</type>
             <exclusions>
                <exclusion>
                    <groupId>com.adobe.flex.framework</groupId>
                    <artifactId>playerglobal</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.puremvc</groupId>
            <artifactId>puremvc-as3-standard</artifactId>
            <version>2.0.4</version>
            <type>swc</type>
        </dependency>
        <dependency>
            <groupId>org.as3commons</groupId>
            <artifactId>as3commons-lang</artifactId>
            <version>1.0.0-SNAPSHOT</version>
            <scope>merged</scope>
            <type>swc</type>
            <exclusions>
                <exclusion>
                    <groupId>com.adobe.flex.framework</groupId>
                    <artifactId>playerglobal</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.as3commons</groupId>
            <artifactId>as3commons-logging</artifactId>
            <version>1.0.0</version>
            <scope>merged</scope>
            <type>swc</type>
            <exclusions>
                <exclusion>
                    <groupId>com.adobe.flexunit</groupId>
                    <artifactId>flexunit</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.as3commons</groupId>
            <artifactId>as3commons-reflect</artifactId>
            <version>1.0.0</version>
            <scope>merged</scope>
            <exclusions>
                <exclusion>
                    <groupId>com.adobe.flexunit</groupId>
                    <artifactId>flexunit</artifactId>
                </exclusion>
            </exclusions>           
            <type>swc</type>
        </dependency>
        <dependency>
            <groupId>com.adobe.flex.framework</groupId>
            <artifactId>air-framework</artifactId>
            <version>${flex-sdk.version}</version>
            <type>pom</type>
        </dependency>
        <dependency>
            <groupId>flexlib</groupId>
            <artifactId>flexlib-bin</artifactId>
            <version>2.4</version>
            <type>swc</type>
        </dependency>
}}}

Obviously, I excluded couple transitive dependencies such as _playerglobal_ and _FlexUnit 0.9_. For AIR application, you must exclude _playerglobal_ and use _airglobal_, otherwise, you will get the following error:

{{{

}}}

=== Flex Mojos ===

=== Flex Unit 4 ===

= Summary =
= Resources = 