#summary My Firefox Plugin Development Experience with Tellurium IDE.
#labels Phase-Implementation,Phase-Support

= Introduction =

Recently, I worked on a Firefox plugin called [http://code.google.com/p/aost/wiki/TelluriumIde080RC1 Tellurium IDE], which is a derivative from our existing Firefox Plugin [http://code.google.com/p/aost/wiki/TrUMP Tellurium UI Module Plugin]. The main feature of the Tellurium IDE is to record, automatically generate Tellurium DSL scripts, and play tests. I like to share my experience with you, but I will not cover the basics of Firefox plugin development such as XUL, but focus mainly on the implementation details on the new features.

= Implementation =

== Application Window ==

Tellurium IDE used jQuery a lot. But be aware that the main target of Tellurium IDE is the application window, not the Firefox plugin XUL window itself. Thus, we need to pay attention to the document variable and make sure it is the application window when we work on the application record and test play.

Fortunately, Mozilla provides two Apis to retrieve the application windows, i.e.,

{{{
getMostRecentWindow();

getEnumerator();
}}}

The former gets back the most recent window and the latter returns all application windows. For example, in Tellurium IDE, we defined the following methods for different purposes.

{{{
    getMostRecentDocument: function() {
        var win = Components.classes["@mozilla.org/appshell/window-mediator;1"]
                .getService(Components.interfaces.nsIWindowMediator)
                .getMostRecentWindow("navigator:browser");

        return win.getBrowser().contentDocument;
    },

    getAllWindows: function() {
        var wm = Components.classes["@mozilla.org/appshell/window-mediator;1"].getService(Components.interfaces.nsIWindowMediator);
        var e = wm.getEnumerator("navigator:browser");
        var wins = new Array();
        while (e.hasMoreElements()) {
            var window = e.getNext();
            var browsers = window.getBrowser().browsers;
            for (var i = 0; i < browsers.length; i++) {
                wins.push(browsers[i].contentWindow);
            }
        }

        return wins;
    }
}}}

== Event Listeners for recording ==

To record user's actions such as type and click, we need to register event listeners and unregister them when the recording is done. In Tellurium IDE, we used [http://api.jquery.com/live/ jQuery live API] to preregister the event listeners even before the web element exists, which greatly simplified our design and implementation.

{{{
Recorder.prototype.attachActionListeners = function(window){
    logger.debug("Attaching listeners for action...");
    var self = this;
    window.addEventListener("beforeunload",
            function(event) {
                try {
                    var recordToolbarButton = document.getElementById("record-button");
                    if (recordToolbarButton.getAttribute("checked")) {
                        self.recordCommand("waitForPageToLoad", null, 30000, ValueType.NUMBER);
                        var url = event.target.URL || event.target.baseURI;
                        logger.debug("Unloading Window " + url);
                        self.generateSource();
                    }
                } catch(error) {
                    logger.error("Error processing beforeunload event:\n" + describeErrorStack(error));
                }
            },
     false);
    teJQuery(window.document).find("input, a, p, link, select, textarea, button, table, tr, td, th, div, span, label").live("change", {recorder: this}, this.typeListener);
    teJQuery(window.document).find("input, a, p, link, select, textarea, button, table, tr, td, th, div, span, label").live("click", {recorder: this}, this.clickListener);
    teJQuery(window.document).find("input, a, p, link, textarea, button, table, tr, td, th, div, span, label").live("mousedown", {recorder: this}, this.rememberClickedListener);
    teJQuery(window.document).find("select, option").live("focus", {recorder: this}, this.selectFocusListener);
    teJQuery(window.document).find("select, option").live("mousedown", {recorder: this}, this.selectMousedownListener);
    teJQuery(window.document).find("select, option").live("change", {recorder: this}, this.selectListener);
};

}}}

where teJQuery is an alias for jQuery to avoid name conflict with jQuery in application, which could be in a different version. Also, we noticed that "beforeunload" event is kinda of special and we have to register it in a regular way.

You may also noticed that we passed event data such as {{{recorder: this}}}, which is a very elegant way to pass in the recorder object to the event handler. For instance, the event handler retrieves the event data and gets hold of the recorder object as follows.

{{{
Recorder.prototype.typeListener = function(event) {
    var recorder = event.data.recorder;
    var tagName = event.target.tagName.toLowerCase();
    var type = event.target.type;
    if (('input' == tagName && ('text' == type || 'password' == type || 'file' == type)) || 'textarea' == tagName) {
        recorder.recordCommand("type", event.target, event.target.value, ValueType.STRING);
    }
};

}}}

To unregister the event listeners, we used [http://api.jquery.com/die jQuery die API].

{{{
Recorder.prototype.detachActionListeners = function(window){
    logger.debug("Detaching listeners for action...");

    teJQuery(window.document).find("input, a, p, link, select, textarea, button, table, tr, td, th, div, span, label").die("change", this.typeListener);
    teJQuery(window.document).find("input, a, p, link, select, textarea, button, table, tr, td, th, div, span, label").die("click", this.clickListener);
    teJQuery(window.document).find("input, a, p, link, textarea, button, table, tr, td, th, div, span, label").die("mousedown", this.rememberClickedListener);
    teJQuery(window.document).find("select, option").die("focus", this.selectFocusListener);
    teJQuery(window.document).find("select, option").die("mousedown", this.selectMousedownListener);
    teJQuery(window.document).find("select, option").die("change", this.selectListener);
};
}}}