#summary Simple Dependency Injection with Groovy AST Transformation.
#labels Phase-Design

= Introduction =

[http://groovy.codehaus.org/Compile-time+Metaprogramming+-+AST+Transformations AST Transformation] is a cool feature in Groovy to do compile-time metaprogramming. This feature somehow looks like compile-time weaving for AOP programming. This article will
introduce how to use Groovy AST Transformation for simple dependency injection. The basic
idea is to change the Groovy class source code at compile time to wire in the dependence.

= Implementation =
== Dependence Provider ==

First, need to define the dependency provider so that the framework know which instance 
to inject to a class. Thus, we define the following annotation.

{{{
@Retention(RetentionPolicy.SOURCE)
@Target({ElementType.TYPE})
@GroovyASTTransformationClass("org.telluriumsource.ast.ProviderASTTransformation")
public @interface Provider {
    String name() default "";
    Class type();
    String scope() default "Session";
    boolean singleton() default true;
}
}}}

The above annotation can be used to the concrete class as follows,

{{{
@Provider(name="ConsoleAppender", type=Appender.class)
public class ConsoleAppender implements Appender {

  public static final String TE = "TE"

  public void listen(String message) {
    println "${TE}: ${message}"
  }

}
}}}

where the name is a unique id and type is the class the annotated class provides instance for. For example, the above annotation on the ConsoleAppender class indicates that it provide instance for interface Appender.

The AST transformation is defined as follows.

{{{
@GroovyASTTransformation(phase = CompilePhase.CANONICALIZATION)
public class ProviderASTTransformation implements ASTTransformation, Opcodes {
    private static final ClassNode PROVIDER = new ClassNode(Provider.class);

    private static final Map<String, ClassInfo> map = new HashMap<String, ClassInfo>();

    public void visit(ASTNode[] nodes, SourceUnit sourceUnit) {
        if (nodes.length != 2 || !(nodes[0] instanceof AnnotationNode) || !(nodes[1] instanceof AnnotatedNode)) {
            throw new RuntimeException("Internal error: expecting [AnnotationNode, AnnotatedNode] but got: " + Arrays.asList(nodes));
        }

        AnnotatedNode parent = (AnnotatedNode) nodes[1];
        AnnotationNode node = (AnnotationNode) nodes[0];

        if (!PROVIDER.equals(node.getClassNode()))
            return;

        ClassNode clazzNode = (ClassNode)parent;
        ClassNode concrete = clazzNode;

        ClassNode clazz;
        final Expression clazzExpr = node.getMember("type");
        if(clazzExpr != null && clazzExpr instanceof ClassExpression){
            clazz = clazzExpr.getType();
        }else{
            clazz = clazzNode;
        }

        String name;
        final Expression nameExpr = node.getMember("name");
        if(nameExpr != null && nameExpr instanceof ConstantExpression){
            name = (String) ((ConstantExpression)nameExpr).getValue();
        }else{
            name = clazz.getName();
        }

        String scope = "Session";
        final Expression scopeExpr = node.getMember("scope");
        if(scopeExpr != null && scopeExpr instanceof ConstantExpression){
            scope = (String) ((ConstantExpression)scopeExpr).getValue();
        }

        boolean singleton = true;   
        final Expression singletonExpr = node.getMember("singleton");
        if(singletonExpr != null && singletonExpr instanceof ConstantExpression){
            singleton = (Boolean)((ConstantExpression)singletonExpr).getValue();
        }

        ClassNode injector = InjectorASTTransformation.getInjector();
        if(injector != null){
            Set<String> names = map.keySet();
            if(names != null && (!names.isEmpty())){
                for(String key: names){
                    ClassInfo info = map.get(key);
                    addInitiateMethod(key, info.getClazz(), info.getConcrete(), info.getScope(), info.isSingleton());
                }
                map.clear();
            }

            addInitiateMethod(name, clazz, concrete, scope, singleton);
        }else{
            ClassInfo classInfo = new ClassInfo(name, clazz, concrete, singleton, scope);
            map.put(name, classInfo);
        }
    }

...
}
}}}

The idea is to add the class information to a class annotated by @Injector, which will be
discussed later.

== Factory Bean ==

A factory bean is defined to generate instance for different classes.

{{{
public interface SessionAwareBeanFactory {

    void addBean(String sessionId, String name, Class clazz, Class concrete, Scope scope, boolean singleton, Object instance);

    Object getByName(String sessionId, String name);

    <T> T getByClass(String sessionId, Class<T> clazz);

    List<Bean> getAllBeans();

    void destroy();
}
}}}

== Input or Environment Variables ==

Sometimes, we need to inject input data or environment variable to classes. We provided a Lookup interface for you to implement your own class to provide this type of data.

{{{
public interface Lookup {

    boolean has(String name);
    
    Object getByName(String name);

    <T> T getByClass(Class<T> clazz);
}

}}}

For example, we can define the run time environment as follows for Tellurium.

{{{
public class RuntimeEnvironment implements Lookup, Cloneable {

    private Map<String, Object> map = new HashMap<String, Object>();

    public Object getByName(String name) {
        return map.get(name);
    }

    public <T> T getByClass(Class<T> clazz) {
        return (T)map.get(clazz.getCanonicalName());
    }

    ...
}
}}}

Then we can use the key of the map for dependency injection.

== Inject Dependency ==

The @Inject annotation is used on fields to introduce dependency injection.

{{{
@Retention(RetentionPolicy.SOURCE)
@Target({ElementType.FIELD})
@GroovyASTTransformationClass("org.telluriumsource.ast.InjectASTTransformation")
public @interface Inject {
    String name() default "";
    boolean lazy() default false;
}
}}}

where name is the unique id and lazy means the actual value will not be set until the field variable is first called.

Similarly, the AST transformation is defined as follows.

{{{
@GroovyASTTransformation(phase = CompilePhase.CANONICALIZATION)
public class InjectASTTransformation implements ASTTransformation, Opcodes {

    private static final Expression NULL_EXPR = ConstantExpression.NULL;

    private static final Token ASSIGN = Token.newSymbol("=", -1, -1);
    private static final Token COMPARE_NOT_EQUAL = Token.newSymbol("!=", -1, -1);

    private static final List<InjectInfo> list = new ArrayList<InjectInfo>();

    public void visit(ASTNode[] nodes, SourceUnit sourceUnit) {
        if (nodes.length != 2 || !(nodes[0] instanceof AnnotationNode) || !(nodes[1] instanceof AnnotatedNode)) {
            throw new RuntimeException("Internal error: expecting [AnnotationNode, AnnotatedNode] but got: " + Arrays.asList(nodes));
        }

        AnnotatedNode parent = (AnnotatedNode) nodes[1];
        AnnotationNode node = (AnnotationNode) nodes[0];
        if (parent instanceof FieldNode) {
            final FieldNode fieldNode = (FieldNode) parent;

            String name;
            final Expression nameExpr = node.getMember("name");
            if(nameExpr != null && nameExpr instanceof ConstantExpression){
                name = (String) ((ConstantExpression)nameExpr).getValue();
            }else{
                name = fieldNode.getType().getName();
            }

            boolean lazy = false;
            final Expression lazyExpr = node.getMember("lazy");
            if (lazyExpr != null && lazyExpr instanceof ConstantExpression) {
                lazy = (Boolean) ((ConstantExpression) lazyExpr).getValue();
            }

            ClassNode injector = InjectorASTTransformation.getInjector();

            if(injector == null){
                InjectInfo info = new InjectInfo(fieldNode, name, lazy);
                list.add(info);
            }else{
                if(!list.isEmpty()){
                    for(InjectInfo inf: list){
                        inject(inf.getFieldNode(), inf.getName(), inf.isLazy());
                    }
                    list.clear();
                }
                inject(fieldNode, name, lazy);
            }
        }
    }
    
...
}
}}}

To inject a variable, simply add the value assignment to its constructor. For lazy wiring, we use the same way the Groovy @Lazy AST transformation does, i.e., rename the field variable and add a getter to the class.

== Injector ==

The injector is the actual class to handle all the injection work. The injector must be annotated with the @Injector annotation and you should only have one injector for your project.

{{{
@Retention(RetentionPolicy.SOURCE)
@Target({ElementType.TYPE})
@GroovyASTTransformationClass("org.telluriumsource.ast.InjectorASTTransformation")
public @interface Injector {
}

}}}

The @Injector AST Transformation will change the injector to a Groovy singleton class and record the compile time class node for the injector.

{{{
@GroovyASTTransformation(phase = CompilePhase.CANONICALIZATION)
public class InjectorASTTransformation implements ASTTransformation, Opcodes {
    private static final ClassNode INJECTOR = new ClassNode(Injector.class);
    private static ClassNode injector = null;

    public static ClassNode getInjector(){
        return injector;
    }
    public void visit(ASTNode[] nodes, SourceUnit sourceUnit) {
        if (nodes.length != 2 || !(nodes[0] instanceof AnnotationNode) || !(nodes[1] instanceof AnnotatedNode)) {
            throw new RuntimeException("Internal error: expecting [AnnotationNode, AnnotatedNode] but got: " + Arrays.asList(nodes));
        }

        AnnotatedNode parent = (AnnotatedNode) nodes[1];
        AnnotationNode node = (AnnotationNode) nodes[0];
        if (!INJECTOR.equals(node.getClassNode()))
            return;
        
        ClassNode clazzNode = (ClassNode)parent;
            
        if(AbstractInjector.class.getCanonicalName().equals(clazzNode.getSuperClass().getName())){
            injector = clazzNode;
            createNonLazy(clazzNode);
        }
    }
...
}
}}}

Be aware that Groovy AST transformation is a compile-time weaving, thus, you need to defined your own injector in your Groovy project. We defined a base injector for users to extend.

{{{
abstract class AbstractInjector implements SessionAwareBeanFactory {

  private Map<String, Lookup> sLookup = new HashMap<String, Lookup>();

  private SessionAwareBeanFactory beanFactory = new DefaultSessionAwareBeanFactory();

  public abstract String getCurrentSessionId();

  public void addLookupForSession(String sessionId, Lookup lookup){
    this.sLookup.put(sessionId, lookup);
  }

  public void addBeanInfo(String name, Class clazz, Class concrete, String scope, boolean singleton){
    
    addBean(name, clazz, concrete, Scope.valueOf(scope), singleton, null);
  }

  public Object getByName(String name) {
    Lookup lookup = this.sLookup.get(this.getCurrentSessionId());
    if(lookup != null && lookup.has(name)){
      return lookup.getByName(name);
    }

    return this.beanFactory.getByName(this.getCurrentSessionId(), name);
  }

  public <T> T getByClass(Class<T> clazz) {
    return this.beanFactory.getByClass(this.getCurrentSessionId(), clazz);
  }

  public void addBean(String name, Class clazz, Class concrete, Scope scope, boolean singleton, Object instance) {
    this.beanFactory.addBean(this.getCurrentSessionId(), name, clazz, concrete, scope, singleton, instance);
  }

  public List<Bean> getAllBeans() {
    return this.beanFactory.getAllBeans();
  }

  public void destroy() {
    this.beanFactory.destroy();
  }

  public void addBean(String sessionId, String name, Class clazz, Class concrete, Scope scope, boolean singleton, Object instance) {
    this.beanFactory.addBean(sessionId, name, clazz, concrete, scope, singleton, instance);
  }

  public <T> T getByClass(String sessionId, Class<T> clazz) {
    return this.beanFactory.getByClass(sessionId, clazz)
  }

  public Object getByName(String sessionId, String name) {
    Lookup lookup = this.sLookup.get(sessionId);
    if(lookup != null && lookup.has(name)){
      return lookup.getByName(name);
    }

    return this.beanFactory.getByName(sessionId, name);
  }
...
}
}}}

To define your own injector, simply extend the AbstractInjector class and add the @Injector annotation to it. For example,

{{{
@Injector
class MockInjector extends AbstractInjector {
  private static final String DEFAULT = "default";

  String getCurrentSessionId() {
    return DEFAULT;
  }
}
}}}


= Usage =

= Resources =
 